apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: '9131'
    prometheus.io/scrape: 'true'
    prometheus.io/probe: 'true'
  labels:
    app: ${SITE_NAME}
    component: varnish
    tier: ${SITE_TIER}
  name: varnish
spec:
  ports:
  - name: http
    port: 6081
    protocol: TCP
    targetPort: 6081
  selector:
    deploymentconfig: varnish
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: DeploymentConfig
metadata:
  labels:
    app: ${SITE_NAME}
    component: varnish
    tier: ${SITE_TIER}
  name: varnish
spec:
  replicas: 1
  selector:
    app: ${SITE_NAME}
    component: varnish
    tier: ${SITE_TIER}
  strategy:
    activeDeadlineSeconds: 21600
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      labels:
        app: ${SITE_NAME}
        component: varnish
        deploymentconfig: varnish
        tier: ${SITE_TIER}
    spec:
      containers:
      - env:
        - name: VARNISH_BACKEND_HOST
          value: ${SITE_NAME}
        - name: VARNISH_BACKEND_PORT
          value: "8080"
        - name: VARNISH_CONFIG_PRESET
          value: drupal
        - name: VARNISH_SECRET
          value: 814A7E45-7349-4FA5-83E7-225B3EB328DD
        - name: VARNISH_PURGE_KEY
          value: 814A7E45-7349-4FA5-83E7-225B3EB328DD
        - name: VARNISH_AUTH
          value: ${VARNISH_AUTH}
        imagePullPolicy: IfNotPresent
        name: varnish
        ports:
        - containerPort: 6081
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /healthz
            port: 6081
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 2
          timeoutSeconds: 1
        resources:
          limits:
            cpu: ${VARNISH_CPU_LIMITS}
            memory: ${VARNISH_MEMORY_LIMITS}
          requests:
            cpu: ${VARNISH_CPU_REQUEST}
            memory: ${VARNISH_MEMORY_REQUEST}
      restartPolicy: Always
      securityContext:
        runAsUser: 1001
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - varnish
      from:
        kind: ImageStreamTag
        name: varnish:latest
        namespace: openshift
    type: ImageChange